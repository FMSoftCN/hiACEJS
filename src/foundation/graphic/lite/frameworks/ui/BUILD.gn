#
# 
#                           IMPORTANT NOTICE
# 
#  The following open source license statement does not apply to any
#  entity in the Exception List published by FMSoft.
# 
#  For more information, please visit:
# 
#  https://www.fmsoft.cn/exception-list
# 
#
#   This file is part of HybridOS, a developing operating system based on
#   MiniGUI. HybridOs will support embedded systems and smart IoT devices.
#
#   Copyright (C) 2020 Beijing FMSoft Technologies Co., Ltd.
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#   Or,
#
#   As this program is a library, any link to this program must follow
#   GNU General Public License version 3 (GPLv3). If you cannot accept
#   GPLv3, you need to be licensed from FMSoft.
#
#   If you have got a commercial license of this program, please use it
#   under the terms and conditions of the commercial license.
#
#   For more information about the commercial license, please refer to
#   <http://www.minigui.com/blog/minigui-licensing-policy/>.
#


config("vector_font_config") {
  include_dirs = [
    "//third_party/freetype/include",
  ]
}

shared_library("ui_shared") {
  sources = [
    "src/animator/animator.cpp",
    "src/animator/easing_equation.cpp",
    "src/animator/interpolation.cpp",
    "src/common/graphic_startup.cpp",
    "src/common/image.cpp",
    "src/common/input_device_manager.cpp",
    "src/common/screen.cpp",
    "src/common/screen_device_proxy.cpp",
    "src/common/task.cpp",
    "src/common/text.cpp",
    "src/common/typed_text.cpp",
    "src/common/ui_text_language.cpp",
    "src/components/root_view.cpp",
    "src/components/text_adapter.cpp",
    "src/components/ui_abstract_clock.cpp",
    "src/components/ui_abstract_progress.cpp",
    "src/components/ui_abstract_scroll.cpp",
    "src/components/ui_analog_clock.cpp",
    "src/components/ui_arc_label.cpp",
    "src/components/ui_axis.cpp",
    "src/components/ui_box_progress.cpp",
    "src/components/ui_button.cpp",
    "src/components/ui_canvas.cpp",
    "src/components/ui_chart.cpp",
    "src/components/ui_checkbox.cpp",
    "src/components/ui_circle_progress.cpp",
    "src/components/ui_dialog.cpp",
    "src/components/ui_digital_clock.cpp",
    "src/components/ui_image_animator.cpp",
    "src/components/ui_image_view.cpp",
    "src/components/ui_label.cpp",
    "src/components/ui_label_button.cpp",
    "src/components/ui_list.cpp",
    "src/components/ui_picker.cpp",
    "src/components/ui_radiobutton.cpp",
    "src/components/ui_repeat_button.cpp",
    "src/components/ui_scroll_view.cpp",
    "src/components/ui_slider.cpp",
#"src/components/ui_surface_view.cpp",
    "src/components/ui_swipe_view.cpp",
    "src/components/ui_texture_mapper.cpp",
    "src/components/ui_time_picker.cpp",
    "src/components/ui_toggle_button.cpp",
    "src/components/ui_view.cpp",
    "src/components/ui_view_group.cpp",
    "src/core/measure_manager.cpp",
    "src/core/render_manager.cpp",
    "src/core/task_manager.cpp",
    "src/default_resource/check_box_res.cpp",
    "src/default_resource/radio_button_res.cpp",
    "src/default_resource/toggle_button_res.cpp",
    "src/dfx/event_injector.cpp",
    "src/dfx/point_event_injector.cpp",
    "src/dfx/ui_dump_dom_tree.cpp",
    "src/dfx/ui_screenshot.cpp",
    "src/dock/input_device.cpp",
    "src/dock/key_input_device.cpp",
    "src/dock/ohos/ohos_input_device.cpp",
    "src/dock/pointer_input_device.cpp",
    "src/dock/virtual_input_device.cpp",
    "src/draw/draw_arc.cpp",
    "src/draw/draw_curve.cpp",
    "src/draw/draw_image.cpp",
    "src/draw/draw_label.cpp",
    "src/draw/draw_line.cpp",
    "src/draw/draw_rect.cpp",
    "src/draw/draw_triangle.cpp",
    "src/draw/draw_utils.cpp",
    "src/events/event.cpp",
    "src/font/ui_base_font.cpp",
    "src/font/ui_dynamic_font.cpp",
    "src/font/ui_font.cpp",
    "src/font/ui_font_allocator.cpp",
    "src/font/ui_font_cache.cpp",
    "src/font/ui_font_vector.cpp",
    "src/imgdecode/cache_manager.cpp",
    "src/imgdecode/file_img_decoder.cpp",
    "src/layout/flex_layout.cpp",
    "src/layout/grid_layout.cpp",
    "src/layout/list_layout.cpp",
    "src/themes/theme.cpp",
    "src/themes/theme_manager.cpp",
    "src/window/iwindows_manager.cpp",
    "src/window/window.cpp",
    "src/window/window_impl.cpp",
  ]
  include_dirs = [
    "//foundation/graphic/lite",
    "//foundation/graphic/lite/hals/include",
    "//foundation/graphic/lite/frameworks/ui/include",
    "//foundation/graphic/lite/frameworks/ui/src",
    "//foundation/graphic/lite/interfaces",
    "//foundation/graphic/lite/interfaces/kits/surface",
    "//foundation/graphic/lite/interfaces/kits/ui",
    "//foundation/graphic/lite/interfaces/kits/utils",
    "//foundation/graphic/lite/utils/include",
    "//foundation/graphic/lite/interfaces/kits/config",
    "//foundation/graphic/lite/interfaces/innerkits/ui",
    "//foundation/graphic/lite/interfaces/innerkits/wms",
    "//foundation/graphic/lite/frameworks",
    "//foundation/graphic/lite/services/wms/include",
    "//foundation/graphic/lite/services/ims/include",
    "//foundation/graphic/lite/tools",
    "//kernel/liteos_a/kernel/include/",
    "//kernel/liteos_a/kernel/common",
    "//third_party/bounds_checking_function/include",
    "//third_party/cJSON",
    "//third_party/libpng",
    "//third_party/libjpeg",
  ]
  public_configs = [ ":vector_font_config" ]
  public_deps = [
    "//foundation/graphic/lite/hals:graphic_hals",
    "//foundation/graphic/lite/utils:graphic_utils",
#"//foundation/graphic/lite/services/ims:ims",
#"//foundation/graphic/lite/services/wms:wms_client",
    "//third_party/bounds_checking_function:libsec_shared",
    "//third_party/cJSON:cjson_shared",
    "//third_party/freetype:freetype",
    "//third_party/libjpeg:libjpeg",
    "//third_party/libpng:libpng",
    "//utils/native/lite/hilog:hilog_shared",
  ]
  cflags = [
    "-Wall",
    "-Wno-sign-compare",
  ]
  cflags_cc = cflags
}
